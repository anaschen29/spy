{"ast":null,"code":"var _jsxFileName = \"/Users/anaschentouf/Documents/PlatformIO/Projects/spy/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Container, Box, Typography, Button, TextField, Select, MenuItem, FormControl, InputLabel, Grid, Paper, FormGroup, FormControlLabel, Checkbox, Divider, Switch } from '@mui/material';\nimport { categories } from './data/gameData';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [gameState, setGameState] = useState({\n    settings: {\n      numberOfPlayers: 4,\n      numberOfSpies: 1,\n      timer: 8,\n      category: categories[0],\n      showRoles: false\n    },\n    players: [],\n    isGameStarted: false,\n    currentTime: 0\n  });\n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(-1);\n  const [isRevealPhase, setIsRevealPhase] = useState(false);\n  const [isCardVisible, setIsCardVisible] = useState(false);\n  const [isGameEnded, setIsGameEnded] = useState(false);\n  const [selectedRoles, setSelectedRoles] = useState({});\n\n  // Initialize selected roles when category changes\n  useEffect(() => {\n    const newSelectedRoles = {};\n    gameState.settings.category.locations.forEach(location => {\n      newSelectedRoles[location.name] = {};\n      location.roles.forEach(role => {\n        newSelectedRoles[location.name][role] = true;\n      });\n    });\n    setSelectedRoles(newSelectedRoles);\n  }, [gameState.settings.category]);\n  const handleRoleToggle = (locationName, role) => {\n    setSelectedRoles(prev => ({\n      ...prev,\n      [locationName]: {\n        ...prev[locationName],\n        [role]: !prev[locationName][role]\n      }\n    }));\n  };\n  const startGame = () => {\n    const {\n      numberOfPlayers,\n      numberOfSpies,\n      category\n    } = gameState.settings;\n\n    // Filter locations based on selected roles\n    const availableLocations = category.locations.map(location => ({\n      ...location,\n      roles: location.roles.filter(role => selectedRoles[location.name][role])\n    })).filter(location => location.roles.length > 0);\n    if (availableLocations.length === 0) {\n      alert('Please select at least one role for at least one location!');\n      return;\n    }\n\n    // Randomly select a location from available ones\n    const randomLocation = availableLocations[Math.floor(Math.random() * availableLocations.length)];\n\n    // Create players array\n    const players = [];\n\n    // Assign spies\n    const spyIndices = new Set();\n    while (spyIndices.size < numberOfSpies) {\n      spyIndices.add(Math.floor(Math.random() * numberOfPlayers));\n    }\n\n    // Create all players\n    for (let i = 0; i < numberOfPlayers; i++) {\n      if (spyIndices.has(i)) {\n        players.push({\n          id: i + 1,\n          role: \"Spy\",\n          location: \"Unknown\",\n          isSpy: true\n        });\n      } else {\n        const availableRoles = randomLocation.roles;\n        const randomRole = availableRoles[Math.floor(Math.random() * availableRoles.length)];\n        players.push({\n          id: i + 1,\n          role: randomRole,\n          location: randomLocation.name,\n          isSpy: false\n        });\n      }\n    }\n    setGameState(prev => ({\n      ...prev,\n      players,\n      isGameStarted: true,\n      currentTime: prev.settings.timer * 60\n    }));\n    setIsRevealPhase(true);\n    setCurrentPlayerIndex(0);\n    setIsGameEnded(false);\n  };\n  useEffect(() => {\n    let timer;\n    if (gameState.isGameStarted && !isRevealPhase && gameState.currentTime > 0) {\n      timer = setInterval(() => {\n        setGameState(prev => ({\n          ...prev,\n          currentTime: prev.currentTime - 1\n        }));\n      }, 1000);\n    }\n    return () => clearInterval(timer);\n  }, [gameState.isGameStarted, gameState.currentTime, isRevealPhase]);\n  useEffect(() => {\n    const handleKeyPress = event => {\n      if (event.code === 'Space' && isRevealPhase) {\n        if (isCardVisible) {\n          // Hide current card and move to next player\n          setIsCardVisible(false);\n          if (currentPlayerIndex < gameState.players.length - 1) {\n            setCurrentPlayerIndex(prev => prev + 1);\n          } else {\n            // All cards have been shown, start the game\n            setIsRevealPhase(false);\n            setCurrentPlayerIndex(-1);\n          }\n        } else {\n          // Show current card\n          setIsCardVisible(true);\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [isRevealPhase, currentPlayerIndex, isCardVisible, gameState.players.length]);\n  const formatTime = seconds => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n  const renderPlayerCard = player => /*#__PURE__*/_jsxDEV(Paper, {\n    sx: {\n      p: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      children: [\"Player \", player.id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), gameState.settings.showRoles && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        children: [\"Role: \", player.role]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: [\"Location: \", player.location]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), player.isSpy && /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"error\",\n      children: \"You are the Spy!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n  const handleEndGame = () => {\n    setIsGameEnded(true);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        my: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        component: \"h1\",\n        gutterBottom: true,\n        align: \"center\",\n        children: \"Spy Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), !gameState.isGameStarted ? /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 3,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              type: \"number\",\n              label: \"Number of Players\",\n              value: gameState.settings.numberOfPlayers,\n              onChange: e => setGameState(prev => ({\n                ...prev,\n                settings: {\n                  ...prev.settings,\n                  numberOfPlayers: parseInt(e.target.value)\n                }\n              }))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              type: \"number\",\n              label: \"Number of Spies\",\n              value: gameState.settings.numberOfSpies,\n              onChange: e => setGameState(prev => ({\n                ...prev,\n                settings: {\n                  ...prev.settings,\n                  numberOfSpies: parseInt(e.target.value)\n                }\n              }))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              type: \"number\",\n              label: \"Timer (minutes)\",\n              value: gameState.settings.timer,\n              onChange: e => setGameState(prev => ({\n                ...prev,\n                settings: {\n                  ...prev.settings,\n                  timer: parseInt(e.target.value)\n                }\n              }))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                children: \"Category\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                value: gameState.settings.category.name,\n                label: \"Category\",\n                onChange: e => {\n                  const category = categories.find(c => c.name === e.target.value);\n                  if (category) {\n                    setGameState(prev => ({\n                      ...prev,\n                      settings: {\n                        ...prev.settings,\n                        category\n                      }\n                    }));\n                  }\n                },\n                children: categories.map(category => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: category.name,\n                  children: category.name\n                }, category.name, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 260,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              control: /*#__PURE__*/_jsxDEV(Switch, {\n                checked: gameState.settings.showRoles,\n                onChange: e => setGameState(prev => ({\n                  ...prev,\n                  settings: {\n                    ...prev.settings,\n                    showRoles: e.target.checked\n                  }\n                }))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 21\n              }, this),\n              label: \"Show Roles in Cards\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: \"Select Available Roles:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 17\n            }, this), gameState.settings.category.locations.map(location => /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                mb: 3\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle1\",\n                gutterBottom: true,\n                children: location.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 290,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                children: location.roles.map(role => {\n                  var _selectedRoles$locati, _selectedRoles$locati2;\n                  return /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                    control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      checked: (_selectedRoles$locati = (_selectedRoles$locati2 = selectedRoles[location.name]) === null || _selectedRoles$locati2 === void 0 ? void 0 : _selectedRoles$locati2[role]) !== null && _selectedRoles$locati !== void 0 ? _selectedRoles$locati : true,\n                      onChange: () => handleRoleToggle(location.name, role)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 298,\n                      columnNumber: 29\n                    }, this),\n                    label: role\n                  }, role, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 295,\n                    columnNumber: 25\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Divider, {\n                sx: {\n                  mt: 2\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 307,\n                columnNumber: 21\n              }, this)]\n            }, location.name, true, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              fullWidth: true,\n              variant: \"contained\",\n              color: \"primary\",\n              onClick: startGame,\n              children: \"Start Game\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 4\n        },\n        children: [isRevealPhase ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            gutterBottom: true,\n            align: \"center\",\n            children: [\"Player \", currentPlayerIndex + 1, \"'s Turn\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            gutterBottom: true,\n            align: \"center\",\n            color: \"text.secondary\",\n            children: [\"Press SPACE to \", isCardVisible ? 'hide' : 'show', \" card\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 17\n          }, this), isCardVisible && renderPlayerCard(gameState.players[currentPlayerIndex])]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            gutterBottom: true,\n            align: \"center\",\n            children: [\"Time Remaining: \", formatTime(gameState.currentTime)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            gutterBottom: true,\n            align: \"center\",\n            color: \"text.secondary\",\n            children: \"Game in Progress\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 2,\n            children: gameState.players.map(player => /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              sm: 6,\n              md: 4,\n              children: /*#__PURE__*/_jsxDEV(Paper, {\n                sx: {\n                  p: 2,\n                  textAlign: 'center'\n                },\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h6\",\n                  children: [\"Player \", player.id]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 347,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  children: \"Role: Hidden\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 348,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  children: \"Location: Hidden\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 349,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 346,\n                columnNumber: 23\n              }, this)\n            }, player.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            fullWidth: true,\n            variant: \"contained\",\n            color: \"secondary\",\n            onClick: handleEndGame,\n            sx: {\n              mt: 2\n            },\n            children: \"End Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true), isGameEnded && /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 4\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            gutterBottom: true,\n            align: \"center\",\n            color: \"error\",\n            children: \"Game Over!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            gutterBottom: true,\n            align: \"center\",\n            children: \"The Spies were:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 2,\n            children: gameState.players.map(player => /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              sm: 6,\n              md: 4,\n              children: renderPlayerCard(player)\n            }, player.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 375,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            fullWidth: true,\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: () => setGameState(prev => ({\n              ...prev,\n              isGameStarted: false\n            })),\n            sx: {\n              mt: 2\n            },\n            children: \"Play Again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"TU/niH+s09fC0uTNNT7h+z+9YOs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Container","Box","Typography","Button","TextField","Select","MenuItem","FormControl","InputLabel","Grid","Paper","FormGroup","FormControlLabel","Checkbox","Divider","Switch","categories","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","gameState","setGameState","settings","numberOfPlayers","numberOfSpies","timer","category","showRoles","players","isGameStarted","currentTime","currentPlayerIndex","setCurrentPlayerIndex","isRevealPhase","setIsRevealPhase","isCardVisible","setIsCardVisible","isGameEnded","setIsGameEnded","selectedRoles","setSelectedRoles","newSelectedRoles","locations","forEach","location","name","roles","role","handleRoleToggle","locationName","prev","startGame","availableLocations","map","filter","length","alert","randomLocation","Math","floor","random","spyIndices","Set","size","add","i","has","push","id","isSpy","availableRoles","randomRole","setInterval","clearInterval","handleKeyPress","event","code","window","addEventListener","removeEventListener","formatTime","seconds","minutes","remainingSeconds","toString","padStart","renderPlayerCard","player","sx","p","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","color","handleEndGame","maxWidth","my","component","gutterBottom","align","mt","container","spacing","item","xs","sm","fullWidth","type","label","value","onChange","e","parseInt","target","find","c","control","checked","mb","_selectedRoles$locati","_selectedRoles$locati2","onClick","md","textAlign","_c","$RefreshReg$"],"sources":["/Users/anaschentouf/Documents/PlatformIO/Projects/spy/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  Container, \n  Box, \n  Typography, \n  Button, \n  TextField, \n  Select, \n  MenuItem, \n  FormControl, \n  InputLabel,\n  Grid,\n  Paper,\n  FormGroup,\n  FormControlLabel,\n  Checkbox,\n  Divider,\n  Switch\n} from '@mui/material';\nimport { categories } from './data/gameData';\nimport { GameState, GameSettings, Player, Location } from './types/game';\n\nconst App: React.FC = () => {\n  const [gameState, setGameState] = useState<GameState>({\n    settings: {\n      numberOfPlayers: 4,\n      numberOfSpies: 1,\n      timer: 8,\n      category: categories[0],\n      showRoles: false\n    },\n    players: [],\n    isGameStarted: false,\n    currentTime: 0\n  });\n\n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState<number>(-1);\n  const [isRevealPhase, setIsRevealPhase] = useState<boolean>(false);\n  const [isCardVisible, setIsCardVisible] = useState<boolean>(false);\n  const [isGameEnded, setIsGameEnded] = useState<boolean>(false);\n  const [selectedRoles, setSelectedRoles] = useState<{ [key: string]: { [key: string]: boolean } }>({});\n\n  // Initialize selected roles when category changes\n  useEffect(() => {\n    const newSelectedRoles: { [key: string]: { [key: string]: boolean } } = {};\n    gameState.settings.category.locations.forEach(location => {\n      newSelectedRoles[location.name] = {};\n      location.roles.forEach(role => {\n        newSelectedRoles[location.name][role] = true;\n      });\n    });\n    setSelectedRoles(newSelectedRoles);\n  }, [gameState.settings.category]);\n\n  const handleRoleToggle = (locationName: string, role: string) => {\n    setSelectedRoles(prev => ({\n      ...prev,\n      [locationName]: {\n        ...prev[locationName],\n        [role]: !prev[locationName][role]\n      }\n    }));\n  };\n\n  const startGame = () => {\n    const { numberOfPlayers, numberOfSpies, category } = gameState.settings;\n    \n    // Filter locations based on selected roles\n    const availableLocations = category.locations.map(location => ({\n      ...location,\n      roles: location.roles.filter(role => selectedRoles[location.name][role])\n    })).filter(location => location.roles.length > 0);\n\n    if (availableLocations.length === 0) {\n      alert('Please select at least one role for at least one location!');\n      return;\n    }\n    \n    // Randomly select a location from available ones\n    const randomLocation = availableLocations[Math.floor(Math.random() * availableLocations.length)];\n    \n    // Create players array\n    const players: Player[] = [];\n    \n    // Assign spies\n    const spyIndices = new Set<number>();\n    while (spyIndices.size < numberOfSpies) {\n      spyIndices.add(Math.floor(Math.random() * numberOfPlayers));\n    }\n    \n    // Create all players\n    for (let i = 0; i < numberOfPlayers; i++) {\n      if (spyIndices.has(i)) {\n        players.push({\n          id: i + 1,\n          role: \"Spy\",\n          location: \"Unknown\",\n          isSpy: true\n        });\n      } else {\n        const availableRoles = randomLocation.roles;\n        const randomRole = availableRoles[Math.floor(Math.random() * availableRoles.length)];\n        players.push({\n          id: i + 1,\n          role: randomRole,\n          location: randomLocation.name,\n          isSpy: false\n        });\n      }\n    }\n    \n    setGameState(prev => ({\n      ...prev,\n      players,\n      isGameStarted: true,\n      currentTime: prev.settings.timer * 60\n    }));\n    setIsRevealPhase(true);\n    setCurrentPlayerIndex(0);\n    setIsGameEnded(false);\n  };\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout;\n    if (gameState.isGameStarted && !isRevealPhase && gameState.currentTime > 0) {\n      timer = setInterval(() => {\n        setGameState(prev => ({\n          ...prev,\n          currentTime: prev.currentTime - 1\n        }));\n      }, 1000);\n    }\n    return () => clearInterval(timer);\n  }, [gameState.isGameStarted, gameState.currentTime, isRevealPhase]);\n\n  useEffect(() => {\n    const handleKeyPress = (event: KeyboardEvent) => {\n      if (event.code === 'Space' && isRevealPhase) {\n        if (isCardVisible) {\n          // Hide current card and move to next player\n          setIsCardVisible(false);\n          if (currentPlayerIndex < gameState.players.length - 1) {\n            setCurrentPlayerIndex(prev => prev + 1);\n          } else {\n            // All cards have been shown, start the game\n            setIsRevealPhase(false);\n            setCurrentPlayerIndex(-1);\n          }\n        } else {\n          // Show current card\n          setIsCardVisible(true);\n        }\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [isRevealPhase, currentPlayerIndex, isCardVisible, gameState.players.length]);\n\n  const formatTime = (seconds: number): string => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  const renderPlayerCard = (player: Player) => (\n    <Paper sx={{ p: 2 }}>\n      <Typography variant=\"h6\">Player {player.id}</Typography>\n      {gameState.settings.showRoles && (\n        <>\n          <Typography>Role: {player.role}</Typography>\n          <Typography>Location: {player.location}</Typography>\n        </>\n      )}\n      {player.isSpy && (\n        <Typography color=\"error\">You are the Spy!</Typography>\n      )}\n    </Paper>\n  );\n\n  const handleEndGame = () => {\n    setIsGameEnded(true);\n  };\n\n  return (\n    <Container maxWidth=\"md\">\n      <Box sx={{ my: 4 }}>\n        <Typography variant=\"h3\" component=\"h1\" gutterBottom align=\"center\">\n          Spy Game\n        </Typography>\n\n        {!gameState.isGameStarted ? (\n          <Box sx={{ mt: 4 }}>\n            <Grid container spacing={3}>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  type=\"number\"\n                  label=\"Number of Players\"\n                  value={gameState.settings.numberOfPlayers}\n                  onChange={(e) => setGameState(prev => ({\n                    ...prev,\n                    settings: {\n                      ...prev.settings,\n                      numberOfPlayers: parseInt(e.target.value)\n                    }\n                  }))}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  type=\"number\"\n                  label=\"Number of Spies\"\n                  value={gameState.settings.numberOfSpies}\n                  onChange={(e) => setGameState(prev => ({\n                    ...prev,\n                    settings: {\n                      ...prev.settings,\n                      numberOfSpies: parseInt(e.target.value)\n                    }\n                  }))}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  type=\"number\"\n                  label=\"Timer (minutes)\"\n                  value={gameState.settings.timer}\n                  onChange={(e) => setGameState(prev => ({\n                    ...prev,\n                    settings: {\n                      ...prev.settings,\n                      timer: parseInt(e.target.value)\n                    }\n                  }))}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <FormControl fullWidth>\n                  <InputLabel>Category</InputLabel>\n                  <Select\n                    value={gameState.settings.category.name}\n                    label=\"Category\"\n                    onChange={(e) => {\n                      const category = categories.find(c => c.name === e.target.value);\n                      if (category) {\n                        setGameState(prev => ({\n                          ...prev,\n                          settings: {\n                            ...prev.settings,\n                            category\n                          }\n                        }));\n                      }\n                    }}\n                  >\n                    {categories.map(category => (\n                      <MenuItem key={category.name} value={category.name}>\n                        {category.name}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12}>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={gameState.settings.showRoles}\n                      onChange={(e) => setGameState(prev => ({\n                        ...prev,\n                        settings: {\n                          ...prev.settings,\n                          showRoles: e.target.checked\n                        }\n                      }))}\n                    />\n                  }\n                  label=\"Show Roles in Cards\"\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <Typography variant=\"h6\" gutterBottom>\n                  Select Available Roles:\n                </Typography>\n                {gameState.settings.category.locations.map(location => (\n                  <Box key={location.name} sx={{ mb: 3 }}>\n                    <Typography variant=\"subtitle1\" gutterBottom>\n                      {location.name}\n                    </Typography>\n                    <FormGroup>\n                      {location.roles.map(role => (\n                        <FormControlLabel\n                          key={role}\n                          control={\n                            <Checkbox\n                              checked={selectedRoles[location.name]?.[role] ?? true}\n                              onChange={() => handleRoleToggle(location.name, role)}\n                            />\n                          }\n                          label={role}\n                        />\n                      ))}\n                    </FormGroup>\n                    <Divider sx={{ mt: 2 }} />\n                  </Box>\n                ))}\n              </Grid>\n              <Grid item xs={12}>\n                <Button\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={startGame}\n                >\n                  Start Game\n                </Button>\n              </Grid>\n            </Grid>\n          </Box>\n        ) : (\n          <Box sx={{ mt: 4 }}>\n            {isRevealPhase ? (\n              <>\n                <Typography variant=\"h4\" gutterBottom align=\"center\">\n                  Player {currentPlayerIndex + 1}'s Turn\n                </Typography>\n                <Typography variant=\"body1\" gutterBottom align=\"center\" color=\"text.secondary\">\n                  Press SPACE to {isCardVisible ? 'hide' : 'show'} card\n                </Typography>\n                {isCardVisible && renderPlayerCard(gameState.players[currentPlayerIndex])}\n              </>\n            ) : (\n              <>\n                <Typography variant=\"h4\" gutterBottom align=\"center\">\n                  Time Remaining: {formatTime(gameState.currentTime)}\n                </Typography>\n                <Typography variant=\"h5\" gutterBottom align=\"center\" color=\"text.secondary\">\n                  Game in Progress\n                </Typography>\n                <Grid container spacing={2}>\n                  {gameState.players.map(player => (\n                    <Grid item xs={12} sm={6} md={4} key={player.id}>\n                      <Paper sx={{ p: 2, textAlign: 'center' }}>\n                        <Typography variant=\"h6\">Player {player.id}</Typography>\n                        <Typography>Role: Hidden</Typography>\n                        <Typography>Location: Hidden</Typography>\n                      </Paper>\n                    </Grid>\n                  ))}\n                </Grid>\n                <Button\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  onClick={handleEndGame}\n                  sx={{ mt: 2 }}\n                >\n                  End Game\n                </Button>\n              </>\n            )}\n            {isGameEnded && (\n              <Box sx={{ mt: 4 }}>\n                <Typography variant=\"h4\" gutterBottom align=\"center\" color=\"error\">\n                  Game Over!\n                </Typography>\n                <Typography variant=\"h5\" gutterBottom align=\"center\">\n                  The Spies were:\n                </Typography>\n                <Grid container spacing={2}>\n                  {gameState.players.map(player => (\n                    <Grid item xs={12} sm={6} md={4} key={player.id}>\n                      {renderPlayerCard(player)}\n                    </Grid>\n                  ))}\n                </Grid>\n                <Button\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() => setGameState(prev => ({ ...prev, isGameStarted: false }))}\n                  sx={{ mt: 2 }}\n                >\n                  Play Again\n                </Button>\n              </Box>\n            )}\n          </Box>\n        )}\n      </Box>\n    </Container>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}